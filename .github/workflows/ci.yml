name: CI

on:
  push:
    branches: [main, develop, release/**]
  pull_request:
    branches: [main, develop]

permissions:
  actions: write
  contents: read
  id-token: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        ruby-version: ["2.7", "3.0", "3.1", "3.2", "3.3"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Run tests with coverage
        run: bundle exec rspec

      - name: Upload coverage to Qlty
        if: matrix.ruby-version == '3.3'
        uses: qltysh/qlty-action/coverage@v1
        continue-on-error: true
        env:
          QLTY_COVERAGE_TOKEN: ${{ secrets.QLTY_COVERAGE_TOKEN }}
        with:
          oidc: true
          files: coverage/coverage.json

      - name: Run Qlty code quality checks
        if: matrix.ruby-version == '3.3'
        run: |
          curl -sSfL https://qlty.sh | sh
          echo "$HOME/.qlty/bin" >> $GITHUB_PATH
          ~/.qlty/bin/qlty check || true
        continue-on-error: true

      - name: Run RuboCop (Ruby 3.3 only)
        if: matrix.ruby-version == '3.3'
        run: bundle exec rubocop || true
        continue-on-error: true

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true

      - name: Run bundle audit
        run: |
          gem install bundler-audit
          bundle audit --update || true
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true

      - name: Modify version for develop branch
        if: github.ref == 'refs/heads/develop'
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          sed -i "s/VERSION = '\([^']*\)'/VERSION = '\1.dev.${SHORT_SHA}'/" lib/sudo/constants.rb
          echo "VERSION_SUFFIX=.dev.${SHORT_SHA}" >> $GITHUB_ENV

      - name: Modify version for release branch
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          sed -i "s/VERSION = '\([^']*\)'/VERSION = '\1.rc.${SHORT_SHA}'/" lib/sudo/constants.rb
          echo "VERSION_SUFFIX=.rc.${SHORT_SHA}" >> $GITHUB_ENV

      - name: Set version suffix for main
        if: github.ref == 'refs/heads/main'
        run: echo "VERSION_SUFFIX=" >> $GITHUB_ENV

      - name: Build gem
        run: gem build sudo.gemspec

      - name: Get gem info
        id: gem_info
        run: |
          GEM_FILE=$(ls *.gem)
          GEM_VERSION=$(echo $GEM_FILE | sed 's/sudo-\(.*\)\.gem/\1/')
          echo "gem_file=$GEM_FILE" >> $GITHUB_OUTPUT
          echo "gem_version=$GEM_VERSION" >> $GITHUB_OUTPUT

      - name: Store gem artifact
        uses: actions/upload-artifact@v4
        with:
          name: gem-${{ steps.gem_info.outputs.gem_version }}
          path: "*.gem"
          retention-days: 30

      - name: Create build summary
        run: |
          echo "## Gem Built Successfully ðŸ’Ž" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.gem_info.outputs.gem_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: ${{ steps.gem_info.outputs.gem_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸš€ **Ready to publish!** Use the 'Manual Release' workflow to publish this gem." >> $GITHUB_STEP_SUMMARY
