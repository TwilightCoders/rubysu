= Ruby Sudo

Give Ruby objects superuser privileges.

Based on dRuby[http://ruby-doc.org/ruby-1.9/classes/DRb.html] and 
sudo[http://www.sudo.ws/].

Only tested with {MRI 1.9}[http://en.wikipedia.org/wiki/Ruby_MRI] .

== REQUIREMENTS

Your user must be allowed, in +/etc/sudoers+, to run +ruby+ and +kill+
commands as root.

A password will be required from the console, or not, depending on
the +NOPASSWD+ options in +/etc/sudoers+.

== USAGE

  require 'mygem/myclass'
  require 'sudo'

  obj   = MyGem::MyClass.new
  
  sudo  = Sudo::Wrapper.new(-rmygem/myclass -rmygem/myclass2)
  
  sudo.start!

  sudo[obj].method # will be run as root (well, a sudo-ed copy) 

  # when you've done:
  sudo.stop!

=== With block

  require 'fileutils'
  require 'sudo'

  Sudo::Wrapper.run('-rfileutils) do |su|
    # here you use square brackets [] :
    # su is an object, not a (top-level) method.
    su[FileUtils].mkdir_p '/ONLY/ROOT/CAN/DO/THAT'
  end
  # Sockets and processes are closed automatically when the block exits

== PRINCIPLES OF OPERATION

Spawns a sudo-ed Ruby process running a 
DRb[http://ruby-doc.org/ruby-1.9/classes/DRb.html] server. Communication is
done via a Unix socket (and, of course, permissions are set to +0600+).

No long-running daemons involved, everything is created on demand.

Access control is entirely delegated to +sudo+.

== TODO

* +sudo+ has a +-A+ option to accept password via an external program
  (maybe graphical): support this feature.

* more options in Sudo::Wrapper.new, maybe a Hash.

== THANKS

Thanks to Tony Arcieri and Brian Candler for suggestions on 
ruby-talk[http://www.ruby-forum.com/topic/262655].

== AUTHOR

Copyright (c) 2010 {Guido De Rosa}[http://github.com/gderosa/].

Sponsored by {VEMAR s.a.s.}[http://www.vemarsas.it/] 

== LICENSE

Ruby's.




