= Ruby Sudo

Give Ruby objects superuser privileges.

Based on dRuby[http://ruby-doc.org/ruby-1.9/classes/DRb.html] and 
sudo[http://www.sudo.ws/].

Only tested with {MRI 1.9}[http://en.wikipedia.org/wiki/Ruby_MRI] .

== REQUIREMENTS

Your user must be allowed, in +/etc/sudoers+, to run +ruby+ and +kill+
commands as root.

A password will be required from the console, or not, depending on
the +NOPASSWD+ options in +/etc/sudoers+.

== USAGE

Let's start with a trivial example:

  require 'mygem/myclass'
  require 'sudo'

  obj   = MyGem::MyClass.new


Now, create a Sudo::Wrapper object:

  sudo  = Sudo::Wrapper.new


Start the sudo-ed Ruby process:

  # 'mygem/myclass' will be automatically required in the 
  # sudo DRb server 

  sudo.start! 


Use it!

  sudo[obj].my_instance_method 
  sudo[MyClass].my_class_method


When you've done, {stop!}[link:Sudo/Wrapper.html#method-i-stop!] it. 
Otherwise, that will be 
done only when the +sudo+ object gets garbage-collected.

  sudo.stop!

=== With a block

Use Sudo::Wrapper::run in this case.

  require 'fileutils'
  require 'sudo'

  Sudo::Wrapper.run do |sudo|
    sudo[FileUtils].mkdir_p '/ONLY/ROOT/CAN/DO/THAT'
  end
  # Sockets and processes are closed automatically when the block exits

== PRINCIPLES OF OPERATION

Spawns a sudo-ed Ruby process running a 
DRb[http://ruby-doc.org/ruby-1.9/classes/DRb.html] server. Communication is
done via a Unix socket (and, of course, permissions are set to +0600+).

No long-running daemons involved, everything is created on demand.

Access control is entirely delegated to +sudo+.

== TODO

+sudo+ has a +-A+ option to accept password via an external program
(maybe graphical): support this feature.

== THANKS

Thanks to Tony Arcieri and Brian Candler for suggestions on 
ruby-talk[http://www.ruby-forum.com/topic/262655].

== AUTHOR

Copyright (c) 2010 {Guido De Rosa}[http://github.com/gderosa/].

Sponsored by {VEMAR s.a.s.}[http://www.vemarsas.it/] 

== LICENSE

Ruby's.




